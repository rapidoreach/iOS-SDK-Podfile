// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RapidoReachSDK
import AdSupport
import CommonCrypto
import CoreTelephony
import Foundation
@_exported import RapidoReachSDK
import Swift
import UIKit
import WebKit
public class RapidoReachDeviceInfo : RapidoReachSDK.RapidoReachDeviceInfoProvider {
  public var deviceID: Swift.String {
    get
  }
  public var carrier: Swift.String? {
    get
  }
  public var osVersion: Swift.String {
    get
  }
  public var appDevice: Swift.String {
    get
  }
  public var locale: Swift.String? {
    get
  }
  public init()
  @objc deinit
}
@objc public class RapidoReach : ObjectiveC.NSObject {
  @objc public static let shared: RapidoReachSDK.RapidoReach
  public static var debug: Swift.Bool
  weak public var delegate: RapidoReachSDK.RapidoReachDelegate?
  public var resetProfiler: Swift.Bool
  public var rewardCallbackFunc: (Swift.Int) -> Swift.Void
  public var rewardCenterClosedCallbackFunc: () -> Swift.Void
  public var rewardCenterOpenedCallbackFunc: () -> Swift.Void
  public var surveysAvailableCallbackFunc: (Swift.Bool) -> Swift.Void
  public var navigationBarTextColor: UIKit.UIColor?
  public var navigationBarColor: UIKit.UIColor?
  public var statusBarStyle: UIKit.UIStatusBarStyle?
  public var navigationBarText: Swift.String
  public init(deviceIDProvider: RapidoReachSDK.RapidoReachDeviceInfoProvider = RapidoReachDeviceInfo())
  @objc public func configure(apiKey: Swift.String, user: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension RapidoReach {
  @objc dynamic public func setRewardCallback(rewardCallback: @escaping ((Swift.Int) -> Swift.Void))
  @objc dynamic public func setrewardCenterClosedCallback(rewardCallback: @escaping (() -> Swift.Void))
  @objc dynamic public func setrewardCenterOpenedCallback(rewardCallback: @escaping (() -> Swift.Void))
  @objc dynamic public func setsurveysAvailableCallback(surveyAvailableCallback: @escaping ((Swift.Bool) -> Swift.Void))
  @objc dynamic public func setNavigationBarColor(for navColor: Swift.String)
  @objc dynamic public func setNavigationBarTextColor(for navTextColor: Swift.String)
  @objc dynamic public func setNavigationBarText(for navBarText: Swift.String)
  @objc dynamic public func setStatusBarStyle(for statusBarStyle: Swift.String)
  @objc dynamic public func fetchAppUserID()
  @objc dynamic public func fetchRewards(for userID: Swift.String? = nil)
  @objc dynamic public func presentSurvey(_ presenter: UIKit.UIViewController? = UIApplication.shared.keyWindow?.rootViewController, title: Swift.String = "", completion: (() -> Swift.Void)? = nil)
  @objc dynamic public func presentSurveyDirect()
  @objc dynamic public func reportAbandon(for userID: Swift.String? = nil)
}
public enum RapidoReachError : Swift.Error {
  case generic(Swift.Error)
  case unknown
  case customerr(Swift.String)
  case ErrorList([Swift.String])
}
extension RapidoReachError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol RapidoReachDeviceInfoProvider {
  var deviceID: Swift.String { get }
  var osVersion: Swift.String { get }
  var appDevice: Swift.String { get }
  var carrier: Swift.String? { get }
  var locale: Swift.String? { get }
}
public protocol RapidoReachDelegate : AnyObject {
  func didGetRewards(_ reward: RapidoReachSDK.RapidoReachReward)
  func didGetError(_ error: RapidoReachSDK.RapidoReachError)
  func didOpenRewardCenter()
  func didClosedRewardCenter()
  func didSurveyAvailable(_ available: Swift.Bool)
}
public struct RapidoReachUser : Swift.Decodable {
  public let id: Swift.String
  public let survey_available: Swift.Bool
  public let profiled: Swift.Bool
  public let moments_polling_frequency: Swift.Int
  public var rewards: RapidoReachSDK.RapidoReachReward?
  public init(from decoder: Swift.Decoder) throws
}
public struct ReplyObject : Swift.Decodable {
  public let ErrorCode: Swift.String
  public let Errors: Swift.Array<Swift.String>
  public let Info: Swift.Array<Swift.String>
  public let Data: Swift.Array<RapidoReachSDK.RapidoReachUser>
  public init(from decoder: Swift.Decoder) throws
}
public struct fetchRewardsReplyObject : Swift.Decodable {
  public let ErrorCode: Swift.String
  public let Errors: Swift.Array<Swift.String>
  public let Info: Swift.Array<Swift.String>
  public let Data: Swift.Array<RapidoReachSDK.RapidoReachReward>
  public init(from decoder: Swift.Decoder) throws
}
public struct RapidoReachReward : Swift.Decodable {
  public let appuser_reward_ids: Swift.String
  public let total_rewards: Swift.Int
  public init(from decoder: Swift.Decoder) throws
}
